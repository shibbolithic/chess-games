# -*- coding: utf-8 -*-
"""chess-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DDey_Ayy2OIKukJVyEQcl-khiosFNO2M

# Chess-Analysis

This is an exploratory data analysis of a dataset of chess games played on lichess.org in the month of july of 2016 taken from kaggle. This data analysis contains 3 main sections having various sub-sections wherein topics ranging from famous openings to termination of a game have been explored.

# Exploaratory Data Analysis-Chess Games
"""

pip install opendatasets --upgrade --quiet

"""## Downloading Data"""

import  opendatasets as od 
download_url = 'https://www.kaggle.com/datasets/arevel/chess-games'
od.download(download_url)

filename = '/content/chess-games/chess_games.csv'

"""Here, i have downloaded the data from a dataset on kaggle. It was done by making an account on kaggle and generating an API key which allowed be to access the on google colab."""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""1. Pandas: officially stands for Python Data Analysis Library. It is used to read, write, manipulate and analyze the data. 

2. NumPy: It helps simplify and summarize large amounts of data in a sensible manner.

3. Matplotlib: It is a comprehensive library for creating static, animated, and interactive visualizations in Python

##data preperation and cleaning

Data cleaning is the process of fixing or removing incorrect, corrupted, incorrectly formatted, duplicate, or incomplete data within a dataset.

TO-DO
1. look at some information about the file
2. fix any missing data or incorrect values
3. make the dataset more readable
"""

df = pd.read_csv(filename)

"""read_csv() function imports a CSV file to DataFrame format.

###looking at the data
"""

df

len(df)

""" The number of rows of pandas DataFrame can be obtained with the Python built-in function len()"""

len(df.columns)

"""The number of columns of pandas DataFrame can be obtained with the Python built-in function len(file_name.columns)"""

df.columns

"""file_name.columns gives the header of all the columns in the dataset"""

df.info()

"""The info() method prints information about the DataFrame. The information contains the number of columns, column labels, column data types, memory usage, range index, and the number of cells in each column """

df.describe()

"""The describe() method returns description of the data in the DataFrame. It givens count, mean, std, min, 25%, 50%, 75% and max."""

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

numeric_df = df.select_dtypes(include=numerics)
len(numeric_df.columns)

"""1. Here, the first line creates a list of all the data types having numeric    values and saves them into a variable called numerics

2. then numeric_df variable stores column for elements stated in numerics variable.

3. Simply, in the last, we are using the simple len function to calculate the number of columns.

### converting 1-0/0-1 into white/black for easy recognision
"""

df["Result"] = df["Result"].replace(['1-0'], "white")
filter = df["Result"]=="white"
df.where(filter).dropna()

df["Result"] = df["Result"].replace(['0-1'], "black")
filter = df["Result"]=="black"
df.where(filter).dropna()

df["Result"] = df["Result"].replace(['1/2-1/2'], "draw")
filter = df["Result"]=="draw"
df.where(filter).dropna()

df["Result"] = df["Result"].replace(['*'], "undeclared")
filter = df["Result"]=="undeclared"
df.where(filter).dropna()

"""1. The replace() method searches a string for a value or a regular expression. The replace() method returns a new string with the value(s) replaced. The replace() method does not change the original string.
2. where() method is used to check a data frame for one or more condition and return the result accordingly
3. dropna() is used to return values that are not null in the data frame

###percentage of missing values per column
"""

df.isna()

"""isna() Return a boolean same-sized object indicating if the values are Null or not"""

missing_percentages= df.isna().sum().sort_values(ascending=False)/ len(df)
missing_percentages

"""This is done too see the percentages of missing values """

missing_percentages [missing_percentages != 0]

"""!= means not equal to, hence this missing_percentages [missing_percentages !=0] all the values in 'missing_percentages' which are not equal to 0"""

type(missing_percentages [missing_percentages != 0])

"""type() is a function in pandas which gives us the datatype of an object."""

missing_percentages [missing_percentages != 0].plot(kind = 'bar')

"""Since there are very few missing values, we'll just go ahead without removing the null sets from the dataset.

##Exploratory Analysis and Visualization
"""

df.columns

"""file_name() gives the name of the values of the header row

###Event
"""

a= df.Event.unique()
a

df['Event'].value_counts(ascending=True)



"""###OPENINGS

analysizing various trends in openings of chess games
"""

df. Opening

df.Opening.unique()

"""unique() gives us some unique values in the Opening column"""

openings = df.Opening.unique()
len(openings)

"""unique() gives the unique values of series object"""

openings[:20]

unique_openings = df.Opening.value_counts(ascending=False)
unique_openings

"""value_counts() returns a Series containing the counts of unique values"""

unique_openings[:20]

unique_openings[:20].plot(kind = 'barh', color='m')

"""plot() function is used to create diagrams"""

import seaborn as sns
sns.set_style("darkgrid")

sns.distplot(unique_openings)

x= unique_openings[unique_openings == 1]
len(x)

"""Here, we can see that there are a total of 83 unique openings that were played only once throughout the month of july"""

famous_openings = unique_openings[unique_openings >= 1000]
rare_openings =  unique_openings[unique_openings <= 1000]

len(famous_openings)/ len(unique_openings)

sns.distplot(famous_openings, color = 'g')

len(rare_openings)/ len(unique_openings)

sns.distplot(rare_openings, color = 'g')

"""###Result"""

df.Result

result = df.Result.unique()
result

df.Result
results = df.groupby('Result').count()
results

"""1. groupby() function is used to split the data into groups based on some criteria.
2. Count() is a Python built-in function that returns the number of times an object appears in a list.

Here, the data in grouped on the basis of the result.

####Termination

reasons of termination of the games have been analyzed here.
"""

df.Termination
termination= df.groupby('Termination').count()
termination

sns.set_style('darkgrid')
w=sns.countplot(x='Termination',data=df, )
w.set_yscale("log")
plt.style.use('dark_background')
sns.countplot(x='Termination',data=df, palette='mako')

"""Countplot shows the counts of observations in each categorical bin using bars. A count plot can be thought of as a histogram across a categorical, instead of quantitative, variable.

##ask and answer questions

#### who are the most frequent players?
"""

pd.concat([df['White'], df['Black']]).value_counts(ascending= True).tail(20).plot(kind = 'barh', title='Top 20 frequent chess players')

"""1. concat() function is used to concatenate pandas objects along a particular axis with optional set logic along the other axes
2.  The tail() method returns a specified number of last rows

####Which color wins more?
"""

sns.countplot(x='Result',data=df,palette='RdBu_r')

"""we can see that overall white wins more

### What are the number of white wins, black wins and draws per event?
"""

g=sns.countplot(x='Result',hue='Event',data=df,palette='rainbow')
g.set_yscale("log")
sns.countplot(x='Result',hue='Event',data=df,palette='rainbow')
plt.legend(bbox_to_anchor=(1.0, 1.0))

"""bbox_to_anchor creates a bounding box with lower corner.

### Who abandons more games?
"""

g=sns.countplot(x='Termination',hue='Result',data=df,palette='pastel')
g.set_yscale("log")
sns.countplot(x='Termination',hue='Result',data=df,palette='pastel')
plt.legend(bbox_to_anchor=(1.0,1.0))

"""we can see that black abandons way more games than white does as white has way more wins than black does in the abandoned section.

## INSIGHTS

Some of the insights drawn were:-
1. The player who played most games played more than 5500 games in a span of one month.
2. There where 83 openings that were played only once
3. Blitz is the most famous chess event with the most number of players
4. Black abandons more games than white does, this is probably becasue people like to attack in chess which is difficult when you start with a black piece.
5. In correspondence matches, white wins and black wins go hand in hand.
6. White wins more matches overall, BUT, In blitz tournaments, black wins are more than white wins.
"""